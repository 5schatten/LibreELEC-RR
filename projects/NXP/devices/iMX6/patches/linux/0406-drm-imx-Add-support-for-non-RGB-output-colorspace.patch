From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Fri, 5 Aug 2016 12:06:05 +0200
Subject: [PATCH] drm/imx: Add support for non-RGB output colorspace

This patch allows to use non-RGB color formats on the output,
to enable YUV output via HDMI or TV-Encoder.

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/gpu/drm/imx/ipuv3-plane.c |  8 ++++++--
 drivers/gpu/ipu-v3/ipu-common.c   | 22 ++++++++++++++++++++++
 include/video/imx-ipu-v3.h        |  1 +
 3 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/imx/ipuv3-plane.c b/drivers/gpu/drm/imx/ipuv3-plane.c
index ca41d53b7008..c214e7e1165f 100644
--- a/drivers/gpu/drm/imx/ipuv3-plane.c
+++ b/drivers/gpu/drm/imx/ipuv3-plane.c
@@ -595,11 +595,13 @@ static void ipu_plane_atomic_update(struct drm_plane *plane,
 	struct drm_plane_state *state = plane->state;
 	struct ipu_plane_state *ipu_state = to_ipu_plane_state(state);
 	struct drm_crtc_state *crtc_state = state->crtc->state;
+	struct imx_crtc_state *imx_crtc_state = to_imx_crtc_state(crtc_state);
+	u32 bus_format = imx_crtc_state->bus_format;
 	struct drm_framebuffer *fb = state->fb;
 	struct drm_rect *dst = &state->dst;
 	unsigned long eba, ubo, vbo;
 	unsigned long alpha_eba = 0;
-	enum ipu_color_space ics;
+	enum ipu_color_space ics, ics_out;
 	unsigned int axi_id = 0;
 	const struct drm_format_info *info;
 	u8 burstsize, num_bursts;
@@ -643,7 +645,9 @@ static void ipu_plane_atomic_update(struct drm_plane *plane,
 	ics = ipu_drm_fourcc_to_colorspace(fb->format->format);
 	switch (ipu_plane->dp_flow) {
 	case IPU_DP_FLOW_SYNC_BG:
-		ipu_dp_setup_channel(ipu_plane->dp, ics, IPUV3_COLORSPACE_RGB);
+		ics_out = bus_format ? ipu_bus_format_to_colorspace(bus_format)
+				     : IPUV3_COLORSPACE_RGB;
+		ipu_dp_setup_channel(ipu_plane->dp, ics, ics_out);
 		ipu_dp_set_global_alpha(ipu_plane->dp, true, 0, true);
 		break;
 	case IPU_DP_FLOW_SYNC_FG:
diff --git a/drivers/gpu/ipu-v3/ipu-common.c b/drivers/gpu/ipu-v3/ipu-common.c
index 48685cddbad1..3ead7198cfa0 100644
--- a/drivers/gpu/ipu-v3/ipu-common.c
+++ b/drivers/gpu/ipu-v3/ipu-common.c
@@ -134,6 +134,28 @@ enum ipu_color_space ipu_pixelformat_to_colorspace(u32 pixelformat)
 }
 EXPORT_SYMBOL_GPL(ipu_pixelformat_to_colorspace);
 
+static inline bool ipu_bus_format_is_rgb(u32 bus_format)
+{
+	/* RGB media bus formats start at 0x1000 */
+	return ((bus_format & ~0xfff) == 0x1000);
+}
+
+static inline bool ipu_bus_format_is_yuv(u32 bus_format)
+{
+	/* YUV media bus formats start at 0x2000 */
+	return ((bus_format & ~0xfff) == 0x2000);
+}
+
+enum ipu_color_space ipu_bus_format_to_colorspace(u32 bus_format)
+{
+	if (ipu_bus_format_is_rgb(bus_format))
+		return IPUV3_COLORSPACE_RGB;
+	if (ipu_bus_format_is_yuv(bus_format))
+		return IPUV3_COLORSPACE_YUV;
+	return IPUV3_COLORSPACE_UNKNOWN;
+}
+EXPORT_SYMBOL_GPL(ipu_bus_format_to_colorspace);
+
 bool ipu_pixelformat_is_planar(u32 pixelformat)
 {
 	switch (pixelformat) {
diff --git a/include/video/imx-ipu-v3.h b/include/video/imx-ipu-v3.h
index abbad94e14a1..e998bbcf9727 100644
--- a/include/video/imx-ipu-v3.h
+++ b/include/video/imx-ipu-v3.h
@@ -426,6 +426,7 @@ int ipu_smfc_map_channel(struct ipu_smfc *smfc, int csi_id, int mipi_id);
 int ipu_smfc_set_burstsize(struct ipu_smfc *smfc, int burstsize);
 int ipu_smfc_set_watermark(struct ipu_smfc *smfc, u32 set_level, u32 clr_level);
 
+enum ipu_color_space ipu_bus_format_to_colorspace(u32 bus_format);
 enum ipu_color_space ipu_drm_fourcc_to_colorspace(u32 drm_fourcc);
 enum ipu_color_space ipu_pixelformat_to_colorspace(u32 pixelformat);
 enum ipu_color_space ipu_mbus_code_to_colorspace(u32 mbus_code);
