From: Andrey Smirnov <andrew.smirnov@gmail.com>
Date: Tue, 9 Jan 2018 09:47:41 -0800
Subject: [PATCH] gpio: Add driver for GPIO functionality of RAVE SP

Signed-off-by: Andrey Smirnov <andrew.smirnov@gmail.com>
---
 drivers/gpio/Kconfig        |   6 +++
 drivers/gpio/Makefile       |   1 +
 drivers/gpio/gpio-rave-sp.c | 102 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 109 insertions(+)
 create mode 100644 drivers/gpio/gpio-rave-sp.c

diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index b960f6f35abd..622b3d7a3ffb 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -405,6 +405,12 @@ config GPIO_PXA
 	help
 	  Say yes here to support the PXA GPIO device
 
+config GPIO_RAVE_SP
+	tristate "RAVE SP GPIO"
+	depends on RAVE_SP_CORE || COMPILE_TEST
+	help
+	  Say yes here to support GPIO on RAVE SP.
+
 config GPIO_RCAR
 	tristate "Renesas R-Car GPIO"
 	depends on ARCH_RENESAS || COMPILE_TEST
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
index 1324c8f966a7..183e22d0627b 100644
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -102,6 +102,7 @@ obj-$(CONFIG_GPIO_PISOSR)	+= gpio-pisosr.o
 obj-$(CONFIG_GPIO_PL061)	+= gpio-pl061.o
 obj-$(CONFIG_GPIO_PMIC_EIC_SPRD)	+= gpio-pmic-eic-sprd.o
 obj-$(CONFIG_GPIO_PXA)		+= gpio-pxa.o
+obj-$(CONFIG_GPIO_RAVE_SP)	+= gpio-rave-sp.o
 obj-$(CONFIG_GPIO_RC5T583)	+= gpio-rc5t583.o
 obj-$(CONFIG_GPIO_RDC321X)	+= gpio-rdc321x.o
 obj-$(CONFIG_GPIO_RCAR)		+= gpio-rcar.o
diff --git a/drivers/gpio/gpio-rave-sp.c b/drivers/gpio/gpio-rave-sp.c
new file mode 100644
index 000000000000..a1dbbdfeb559
--- /dev/null
+++ b/drivers/gpio/gpio-rave-sp.c
@@ -0,0 +1,102 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * GPIO driver for RAVE SP
+ *
+ * Copyright (C) 2018 Zodiac Inflight Innovations
+ *
+ * Author: Andrey Smirnov <andrew.smirnov@gmail.com>
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/gpio.h>
+#include <linux/mfd/rave-sp.h>
+#include <linux/platform_device.h>
+#include <linux/of_device.h>
+
+
+struct rave_sp_gpio_port {
+	struct gpio_chip gc;
+	struct rave_sp *sp;
+};
+
+static int rave_sp_gpio_get(struct gpio_chip *gc, unsigned int gpio)
+{
+	struct rave_sp_gpio_port *port = gpiochip_get_data(gc);
+	u8 cmd[] = {
+		[0] = RAVE_SP_CMD_GET_GPIO_STATE,
+		[1] = 0,
+	};
+	u16 gpios[4];
+	int ret;
+
+	const unsigned int bank = gpio / 16;
+	const unsigned int line = gpio % 16;
+
+	ret = rave_sp_exec(port->sp, cmd, sizeof(cmd), gpios, sizeof(gpios));
+	if (ret)
+		return ret;
+
+	return !!(gpios[bank] & BIT(line));
+}
+
+static void rave_sp_gpio_set(struct gpio_chip *gc, unsigned int gpio, int val)
+{
+}
+
+static int rave_sp_gpio_direction_input(struct gpio_chip *chip, unsigned gpio)
+{
+	return 0;
+}
+
+static int rave_sp_gpio_direction_output(struct gpio_chip *chip, unsigned gpio,
+					 int value)
+{
+	return -ENOTSUPP;
+}
+
+static int rave_sp_gpio_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+	struct rave_sp_gpio_port *port;
+	struct gpio_chip *gc;
+
+	port = devm_kzalloc(dev, sizeof(*port), GFP_KERNEL);
+	if (!port)
+		return -ENOMEM;
+
+	port->sp = dev_get_drvdata(dev->parent);
+	gc = &port->gc;
+
+	gc->of_node = np;
+	gc->parent  = dev;
+	gc->label   = "rave-sp-gpio";
+	gc->ngpio   = 4 * 16;
+	gc->base    = -1;
+
+	gc->direction_input	= rave_sp_gpio_direction_input;
+	gc->get			= rave_sp_gpio_get;
+	gc->direction_output	= rave_sp_gpio_direction_output;
+	gc->set			= rave_sp_gpio_set;
+
+	return gpiochip_add_data(gc, port);
+}
+
+static const struct of_device_id rave_sp_gpio_dt_ids[] = {
+	{ .compatible = "zii,rave-sp-gpio", },
+	{ /* sentinel */ }
+};
+
+static struct platform_driver rave_sp_gpio_driver = {
+	.probe		= rave_sp_gpio_probe,
+	.driver		= {
+		.name = KBUILD_MODNAME,
+		.of_match_table = rave_sp_gpio_dt_ids,
+	},
+};
+module_platform_driver(rave_sp_gpio_driver);
+MODULE_DEVICE_TABLE(of, rave_sp_gpio_dt_ids);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Andrey Smirnov <andrew.smirnov@gmail.com>");
+MODULE_DESCRIPTION("RAVE SP GPIO driver");
