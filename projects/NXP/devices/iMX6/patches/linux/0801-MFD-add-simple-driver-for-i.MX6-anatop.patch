From: Lucas Stach <l.stach@pengutronix.de>
Date: Mon, 6 Nov 2017 15:43:46 +0100
Subject: [PATCH] MFD: add simple driver for i.MX6 anatop

For now this driver only handles the brown-out interrupt for the
digital regulators, but can be extended to handle more shared ANATOP
state.

Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
---
 drivers/mfd/Kconfig       |  9 +++++
 drivers/mfd/Makefile      |  2 +-
 drivers/mfd/imx6-anatop.c | 95 +++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 105 insertions(+), 1 deletion(-)
 create mode 100644 drivers/mfd/imx6-anatop.c

diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index b860eb5aa194..4c36bdb5141d 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -1812,6 +1812,15 @@ config MFD_STM32_TIMERS
 	  for PWM and IIO Timer. This driver allow to share the
 	  registers between the others drivers.
 
+config MFD_IMX6_ANATOP
+	tristate "i.MX6 ANATOP core driver"
+	depends on ARCH_MXC
+	select REGMAP
+	select REGMAP_MMIO
+	help
+	  Select this option to enable shared services in the i.MX6 anatop
+	  module like regulator brown-out detection.
+
 menu "Multimedia Capabilities Port drivers"
 	depends on ARCH_SA1100
 
diff --git a/drivers/mfd/Makefile b/drivers/mfd/Makefile
index d9d2cf0d32ef..f0e90028d3a0 100644
--- a/drivers/mfd/Makefile
+++ b/drivers/mfd/Makefile
@@ -228,4 +228,4 @@ obj-$(CONFIG_MFD_STM32_TIMERS) 	+= stm32-timers.o
 obj-$(CONFIG_MFD_MXS_LRADC)     += mxs-lradc.o
 obj-$(CONFIG_MFD_SC27XX_PMIC)	+= sprd-sc27xx-spi.o
 obj-$(CONFIG_RAVE_SP_CORE)	+= rave-sp.o
-
+obj-$(CONFIG_MFD_IMX6_ANATOP)	+= imx6-anatop.o
diff --git a/drivers/mfd/imx6-anatop.c b/drivers/mfd/imx6-anatop.c
new file mode 100644
index 000000000000..47205298c9ba
--- /dev/null
+++ b/drivers/mfd/imx6-anatop.c
@@ -0,0 +1,95 @@
+/*
+ * Copyright (C) 2017 Pengutronix, Lucas Stach <kernel@pengutronix.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include <linux/interrupt.h>
+#include <linux/mfd/syscon.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/regmap.h>
+
+#define PMU_MISC2			0x170
+#define  PMU_MISC2_REG0_BO_STATUS	0x8
+#define  PMU_MISC2_REG1_BO_STATUS	0x800
+#define  PMU_MISC2_REG2_BO_STATUS	0x80000
+
+static irqreturn_t anatop_dig_bo_handler(int irq, void *data)
+{
+	struct regmap *regmap = data;
+	u32 val;
+
+	regmap_read(regmap, PMU_MISC2, &val);
+	if (!(val & (PMU_MISC2_REG0_BO_STATUS |
+	             PMU_MISC2_REG1_BO_STATUS |
+		     PMU_MISC2_REG2_BO_STATUS))) {
+		pr_warn_ratelimited("brownout detected on unknown regulator\n");
+		return IRQ_HANDLED;
+	}
+
+	if (val & PMU_MISC2_REG0_BO_STATUS)
+		pr_warn_ratelimited("brownout detected on regulator ARM\n");
+	if (val & PMU_MISC2_REG1_BO_STATUS)
+		pr_warn_ratelimited("brownout detected on regulator PU\n");
+	if (val & PMU_MISC2_REG2_BO_STATUS)
+		pr_warn_ratelimited("brownout detected on regulator SOC\n");
+
+	return IRQ_HANDLED;
+}
+
+static int imx6_anatop_probe(struct platform_device *pdev)
+{
+	struct regmap *regmap;
+	int irq, ret;
+
+	if (!of_machine_is_compatible("fsl,imx6qp"))
+		return 0;
+
+	irq = platform_get_irq(pdev, 2);
+	if (irq < 0)
+		return irq;
+
+	regmap = syscon_node_to_regmap(pdev->dev.of_node);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	ret = devm_request_irq(&pdev->dev, irq, anatop_dig_bo_handler, 0,
+			       "anatop dig brownout", regmap);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static const struct of_device_id imx6_anatop_dt_ids[] = {
+	{ .compatible = "fsl,imx6q-anatop" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, imx6_anatop_dt_ids);
+
+static struct platform_driver imx6_anatop_driver = {
+	.driver = {
+		.name = "imx6-anatop",
+		.of_match_table = imx6_anatop_dt_ids,
+	},
+	.probe = imx6_anatop_probe,
+};
+module_platform_driver(imx6_anatop_driver);
+
+MODULE_AUTHOR("Lucas Stach <l.stach@pengutronix.de>");
+MODULE_DESCRIPTION("Freescale i.MX6 anatop driver");
+MODULE_LICENSE("GPL v2");
