From 8370986010de6a2bc1d02c7a94279d8cc6866c40 Mon Sep 17 00:00:00 2001
From: Dave Stevenson <dave.stevenson@raspberrypi.org>
Date: Wed, 21 Feb 2018 15:53:59 +0000
Subject: [PATCH 44/80] staging: bcm2835-camera: Fix open parenthesis alignment

Fix checkpatch "Alignment should match open parenthesis"
errors.

Signed-off-by: Dave Stevenson <dave.stevenson@raspberrypi.org>
---
 .../bcm2835-camera/bcm2835-camera.c           | 19 +++++++-------
 .../vc04_services/bcm2835-camera/controls.c   | 25 ++++++++++++-------
 .../vc04_services/bcm2835-camera/mmal-vchiq.c | 12 ++++-----
 .../vc04_services/bcm2835-camera/mmal-vchiq.h |  4 +--
 4 files changed, 34 insertions(+), 26 deletions(-)

diff --git a/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.c b/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.c
index b29b5cf363f4..7f3d1a77d711 100644
--- a/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.c
+++ b/drivers/staging/vc04_services/bcm2835-camera/bcm2835-camera.c
@@ -71,7 +71,7 @@ MODULE_PARM_DESC(max_video_height, "Threshold for video mode");
 static int always_remove_padding;
 module_param(always_remove_padding, int, 0644);
 MODULE_PARM_DESC(always_remove_padding,
-	"Always remove all padding from the image (for apps that ignore bytesperline)");
+		 "Always remove all padding from the image (for apps that ignore bytesperline)");
 
 /* global device data array */
 static struct bm2835_mmal_dev *gdev[MAX_BCM2835_CAMERAS];
@@ -424,7 +424,7 @@ static void buffer_cb(struct vchiq_mmal_instance *instance,
 	if (dev->capture.vc_start_timestamp == -1) {
 		buf->vb.vb2_buf.timestamp = ktime_get_ns();
 		v4l2_dbg(1, bcm2835_v4l2_debug, &dev->v4l2_dev,
-		 "Buffer time set as current time - %lld",
+			 "Buffer time set as current time - %lld",
 		 buf->vb.vb2_buf.timestamp);
 	} else if (pts != 0) {
 		s64 runtime_us = pts -
@@ -440,13 +440,13 @@ static void buffer_cb(struct vchiq_mmal_instance *instance,
 		if (dev->capture.last_timestamp) {
 			buf->vb.vb2_buf.timestamp = dev->capture.last_timestamp;
 			v4l2_dbg(1, bcm2835_v4l2_debug, &dev->v4l2_dev,
-			 "Buffer time set as last timestamp - %lld",
+				 "Buffer time set as last timestamp - %lld",
 			 buf->vb.vb2_buf.timestamp);
 		} else {
 			buf->vb.vb2_buf.timestamp =
 			dev->capture.kernel_start_timestamp;
 			v4l2_dbg(1, bcm2835_v4l2_debug, &dev->v4l2_dev,
-			 "Buffer time set as start timestamp - %lld",
+				 "Buffer time set as start timestamp - %lld",
 			 buf->vb.vb2_buf.timestamp);
 		}
 	}
@@ -457,7 +457,7 @@ static void buffer_cb(struct vchiq_mmal_instance *instance,
 		buf->vb.flags |= V4L2_BUF_FLAG_KEYFRAME;
 
 	v4l2_dbg(1, bcm2835_v4l2_debug, &dev->v4l2_dev,
-		"Buffer has ts %llu",
+		 "Buffer has ts %llu",
 		dev->capture.last_timestamp);
 	vb2_buffer_done(&buf->vb.vb2_buf, VB2_BUF_STATE_DONE);
 
@@ -627,7 +627,7 @@ static int start_streaming(struct vb2_queue *vq, unsigned int count)
 	    vchiq_mmal_port_enable(dev->instance, dev->capture.port, buffer_cb);
 	if (ret) {
 		v4l2_err(&dev->v4l2_dev,
-			"Failed to enable capture port - error %d. Disabling camera port again\n",
+			 "Failed to enable capture port - error %d. Disabling camera port again\n",
 			ret);
 
 		vchiq_mmal_port_disable(dev->instance,
@@ -1035,7 +1035,8 @@ static int vidioc_try_fmt_vid_cap(struct file *file, void *priv,
 		f->fmt.pix.bytesperline =
 			(f->fmt.pix.bytesperline + align_mask) & ~align_mask;
 		v4l2_dbg(1, bcm2835_v4l2_debug, &dev->v4l2_dev,
-			"Not removing padding, so bytes/line = %d, (align_mask %d)\n", f->fmt.pix.bytesperline, align_mask);
+			 "Not removing padding, so bytes/line = %d, (align_mask %d)\n",
+			 f->fmt.pix.bytesperline, align_mask);
 	}
 
 	/* Image buffer has to be padded to allow for alignment, even though
@@ -1139,7 +1140,7 @@ static int mmal_setup_components(struct bm2835_mmal_dev *dev,
 
 	remove_padding = mfmt->remove_padding || always_remove_padding;
 	vchiq_mmal_port_parameter_set(dev->instance,
-		camera_port,
+				      camera_port,
 		MMAL_PARAMETER_NO_IMAGE_PADDING,
 		&remove_padding, sizeof(remove_padding));
 
@@ -1380,7 +1381,7 @@ static int vidioc_s_fmt_vid_cap(struct file *file, void *priv,
 }
 
 static int vidioc_enum_framesizes(struct file *file, void *fh,
-			   struct v4l2_frmsizeenum *fsize)
+				  struct v4l2_frmsizeenum *fsize)
 {
 	struct bm2835_mmal_dev *dev = video_drvdata(file);
 	static const struct v4l2_frmsize_stepwise sizes = {
diff --git a/drivers/staging/vc04_services/bcm2835-camera/controls.c b/drivers/staging/vc04_services/bcm2835-camera/controls.c
index 59b9f36509f2..507ad4884306 100644
--- a/drivers/staging/vc04_services/bcm2835-camera/controls.c
+++ b/drivers/staging/vc04_services/bcm2835-camera/controls.c
@@ -1257,9 +1257,12 @@ int bm2835_mmal_init_controls(struct bm2835_mmal_dev *dev,
 
 		switch (ctrl->type) {
 		case MMAL_CONTROL_TYPE_STD:
-			dev->ctrls[c] = v4l2_ctrl_new_std(hdl,
-				&bm2835_mmal_ctrl_ops, ctrl->id,
-				ctrl->min, ctrl->max, ctrl->step, ctrl->def);
+			dev->ctrls[c] =
+				v4l2_ctrl_new_std(hdl,
+						  &bm2835_mmal_ctrl_ops,
+						  ctrl->id, ctrl->min,
+						  ctrl->max, ctrl->step,
+						  ctrl->def);
 			break;
 
 		case MMAL_CONTROL_TYPE_STD_MENU:
@@ -1283,16 +1286,20 @@ int bm2835_mmal_init_controls(struct bm2835_mmal_dev *dev,
 				mask = ~mask;
 			}
 
-			dev->ctrls[c] = v4l2_ctrl_new_std_menu(hdl,
-			&bm2835_mmal_ctrl_ops, ctrl->id,
-			ctrl->max, mask, ctrl->def);
+			dev->ctrls[c] =
+				v4l2_ctrl_new_std_menu(hdl,
+						       &bm2835_mmal_ctrl_ops,
+						       ctrl->id, ctrl->max,
+						       mask, ctrl->def);
 			break;
 		}
 
 		case MMAL_CONTROL_TYPE_INT_MENU:
-			dev->ctrls[c] = v4l2_ctrl_new_int_menu(hdl,
-				&bm2835_mmal_ctrl_ops, ctrl->id,
-				ctrl->max, ctrl->def, ctrl->imenu);
+			dev->ctrls[c] =
+				v4l2_ctrl_new_int_menu(hdl,
+						       &bm2835_mmal_ctrl_ops,
+						       ctrl->id, ctrl->max,
+						       ctrl->def, ctrl->imenu);
 			break;
 
 		case MMAL_CONTROL_TYPE_CLUSTER:
diff --git a/drivers/staging/vc04_services/bcm2835-camera/mmal-vchiq.c b/drivers/staging/vc04_services/bcm2835-camera/mmal-vchiq.c
index 02e80a18bf3a..18d9b3504af5 100644
--- a/drivers/staging/vc04_services/bcm2835-camera/mmal-vchiq.c
+++ b/drivers/staging/vc04_services/bcm2835-camera/mmal-vchiq.c
@@ -320,7 +320,7 @@ static void buffer_work_cb(struct work_struct *work)
 		container_of(work, struct mmal_msg_context, u.bulk.work);
 
 	pr_err("%s: ctx: %p, buf %p, idx %u\n", __func__, msg_context,
-			msg_context->u.bulk.buffer,
+	       msg_context->u.bulk.buffer,
 			msg_context->u.bulk.buffer->vb.vb2_buf.index);
 
 	msg_context->u.bulk.port->buffer_cb(msg_context->u.bulk.instance,
@@ -349,7 +349,7 @@ static void buffer_to_host_work_cb(struct work_struct *work)
 	int ret;
 
 	pr_err("%s: ctx: %p, buf %p, idx %u\n", __func__, msg_context,
-			msg_context->u.bulk.buffer,
+	       msg_context->u.bulk.buffer,
 			msg_context->u.bulk.buffer->vb.vb2_buf.index);
 
 	/* queue the bulk submission */
@@ -371,7 +371,7 @@ static void buffer_to_host_work_cb(struct work_struct *work)
 		       __func__, msg_context, ret);
 
 	pr_err("%s: exit ctx: %p, buf %p, idx %u\n", __func__, msg_context,
-			msg_context->u.bulk.buffer,
+	       msg_context->u.bulk.buffer,
 			msg_context->u.bulk.buffer->vb.vb2_buf.index);
 }
 
@@ -421,7 +421,7 @@ static int bulk_receive(struct vchiq_mmal_instance *instance,
 	schedule_work(&msg_context->u.bulk.buffer_to_host_work);
 
 	pr_err("%s: exit ctx: %p, buf %p, idx %u\n", __func__, msg_context,
-			msg_context->u.bulk.buffer,
+	       msg_context->u.bulk.buffer,
 			msg_context->u.bulk.buffer->vb.vb2_buf.index);
 
 	return 0;
@@ -469,7 +469,7 @@ static int inline_receive(struct vchiq_mmal_instance *instance,
 	    msg->u.buffer_from_host.payload_in_message;
 
 	pr_err("%s: exit ctx: %p, buf %p, idx %u\n", __func__, msg_context,
-			msg_context->u.bulk.buffer,
+	       msg_context->u.bulk.buffer,
 			msg_context->u.bulk.buffer->vb.vb2_buf.index);
 	return 0;
 }
@@ -786,7 +786,7 @@ static int send_synchronous_mmal_msg(struct vchiq_mmal_instance *instance,
 	if (payload_len >
 	    (MMAL_MSG_MAX_SIZE - sizeof(struct mmal_msg_header))) {
 		pr_err("payload length %d exceeds max:%d\n", payload_len,
-		      (int)(MMAL_MSG_MAX_SIZE -
+		       (int)(MMAL_MSG_MAX_SIZE -
 			    sizeof(struct mmal_msg_header)));
 		return -EINVAL;
 	}
diff --git a/drivers/staging/vc04_services/bcm2835-camera/mmal-vchiq.h b/drivers/staging/vc04_services/bcm2835-camera/mmal-vchiq.h
index 5f4d0d8d4420..ad73277bee8c 100644
--- a/drivers/staging/vc04_services/bcm2835-camera/mmal-vchiq.h
+++ b/drivers/staging/vc04_services/bcm2835-camera/mmal-vchiq.h
@@ -133,7 +133,7 @@ int vchiq_mmal_port_enable(
  * disable a port will dequeue any pending buffers
  */
 int vchiq_mmal_port_disable(struct vchiq_mmal_instance *instance,
-			   struct vchiq_mmal_port *port);
+			    struct vchiq_mmal_port *port);
 
 int vchiq_mmal_port_parameter_set(struct vchiq_mmal_instance *instance,
 				  struct vchiq_mmal_port *port,
@@ -151,7 +151,7 @@ int vchiq_mmal_port_set_format(struct vchiq_mmal_instance *instance,
 			       struct vchiq_mmal_port *port);
 
 int vchiq_mmal_port_connect_tunnel(struct vchiq_mmal_instance *instance,
-			    struct vchiq_mmal_port *src,
+				   struct vchiq_mmal_port *src,
 			    struct vchiq_mmal_port *dst);
 
 int vchiq_mmal_version(struct vchiq_mmal_instance *instance,
-- 
2.17.0

